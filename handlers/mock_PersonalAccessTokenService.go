// Code generated by mockery v2.42.0. DO NOT EDIT.

package handlers

import (
	context "context"

	models "github.com/alexferl/echo-boilerplate/models"
	mock "github.com/stretchr/testify/mock"
)

// MockPersonalAccessTokenService is an autogenerated mock type for the PersonalAccessTokenService type
type MockPersonalAccessTokenService struct {
	mock.Mock
}

type MockPersonalAccessTokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPersonalAccessTokenService) EXPECT() *MockPersonalAccessTokenService_Expecter {
	return &MockPersonalAccessTokenService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, model
func (_m *MockPersonalAccessTokenService) Create(ctx context.Context, model *models.PersonalAccessToken) (*models.PersonalAccessToken, error) {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.PersonalAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PersonalAccessToken) (*models.PersonalAccessToken, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.PersonalAccessToken) *models.PersonalAccessToken); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PersonalAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.PersonalAccessToken) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonalAccessTokenService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPersonalAccessTokenService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - model *models.PersonalAccessToken
func (_e *MockPersonalAccessTokenService_Expecter) Create(ctx interface{}, model interface{}) *MockPersonalAccessTokenService_Create_Call {
	return &MockPersonalAccessTokenService_Create_Call{Call: _e.mock.On("Create", ctx, model)}
}

func (_c *MockPersonalAccessTokenService_Create_Call) Run(run func(ctx context.Context, model *models.PersonalAccessToken)) *MockPersonalAccessTokenService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.PersonalAccessToken))
	})
	return _c
}

func (_c *MockPersonalAccessTokenService_Create_Call) Return(_a0 *models.PersonalAccessToken, _a1 error) *MockPersonalAccessTokenService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonalAccessTokenService_Create_Call) RunAndReturn(run func(context.Context, *models.PersonalAccessToken) (*models.PersonalAccessToken, error)) *MockPersonalAccessTokenService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, userId
func (_m *MockPersonalAccessTokenService) Find(ctx context.Context, userId string) (models.PersonalAccessTokens, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 models.PersonalAccessTokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.PersonalAccessTokens, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.PersonalAccessTokens); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.PersonalAccessTokens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonalAccessTokenService_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockPersonalAccessTokenService_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockPersonalAccessTokenService_Expecter) Find(ctx interface{}, userId interface{}) *MockPersonalAccessTokenService_Find_Call {
	return &MockPersonalAccessTokenService_Find_Call{Call: _e.mock.On("Find", ctx, userId)}
}

func (_c *MockPersonalAccessTokenService_Find_Call) Run(run func(ctx context.Context, userId string)) *MockPersonalAccessTokenService_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPersonalAccessTokenService_Find_Call) Return(_a0 models.PersonalAccessTokens, _a1 error) *MockPersonalAccessTokenService_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonalAccessTokenService_Find_Call) RunAndReturn(run func(context.Context, string) (models.PersonalAccessTokens, error)) *MockPersonalAccessTokenService_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, userId, name
func (_m *MockPersonalAccessTokenService) FindOne(ctx context.Context, userId string, name string) (*models.PersonalAccessToken, error) {
	ret := _m.Called(ctx, userId, name)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *models.PersonalAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.PersonalAccessToken, error)); ok {
		return rf(ctx, userId, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.PersonalAccessToken); ok {
		r0 = rf(ctx, userId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PersonalAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonalAccessTokenService_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockPersonalAccessTokenService_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - name string
func (_e *MockPersonalAccessTokenService_Expecter) FindOne(ctx interface{}, userId interface{}, name interface{}) *MockPersonalAccessTokenService_FindOne_Call {
	return &MockPersonalAccessTokenService_FindOne_Call{Call: _e.mock.On("FindOne", ctx, userId, name)}
}

func (_c *MockPersonalAccessTokenService_FindOne_Call) Run(run func(ctx context.Context, userId string, name string)) *MockPersonalAccessTokenService_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPersonalAccessTokenService_FindOne_Call) Return(_a0 *models.PersonalAccessToken, _a1 error) *MockPersonalAccessTokenService_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonalAccessTokenService_FindOne_Call) RunAndReturn(run func(context.Context, string, string) (*models.PersonalAccessToken, error)) *MockPersonalAccessTokenService_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, userId, id
func (_m *MockPersonalAccessTokenService) Read(ctx context.Context, userId string, id string) (*models.PersonalAccessToken, error) {
	ret := _m.Called(ctx, userId, id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *models.PersonalAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.PersonalAccessToken, error)); ok {
		return rf(ctx, userId, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.PersonalAccessToken); ok {
		r0 = rf(ctx, userId, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PersonalAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonalAccessTokenService_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockPersonalAccessTokenService_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - id string
func (_e *MockPersonalAccessTokenService_Expecter) Read(ctx interface{}, userId interface{}, id interface{}) *MockPersonalAccessTokenService_Read_Call {
	return &MockPersonalAccessTokenService_Read_Call{Call: _e.mock.On("Read", ctx, userId, id)}
}

func (_c *MockPersonalAccessTokenService_Read_Call) Run(run func(ctx context.Context, userId string, id string)) *MockPersonalAccessTokenService_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPersonalAccessTokenService_Read_Call) Return(_a0 *models.PersonalAccessToken, _a1 error) *MockPersonalAccessTokenService_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonalAccessTokenService_Read_Call) RunAndReturn(run func(context.Context, string, string) (*models.PersonalAccessToken, error)) *MockPersonalAccessTokenService_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Revoke provides a mock function with given fields: ctx, model
func (_m *MockPersonalAccessTokenService) Revoke(ctx context.Context, model *models.PersonalAccessToken) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Revoke")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PersonalAccessToken) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPersonalAccessTokenService_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type MockPersonalAccessTokenService_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//   - ctx context.Context
//   - model *models.PersonalAccessToken
func (_e *MockPersonalAccessTokenService_Expecter) Revoke(ctx interface{}, model interface{}) *MockPersonalAccessTokenService_Revoke_Call {
	return &MockPersonalAccessTokenService_Revoke_Call{Call: _e.mock.On("Revoke", ctx, model)}
}

func (_c *MockPersonalAccessTokenService_Revoke_Call) Run(run func(ctx context.Context, model *models.PersonalAccessToken)) *MockPersonalAccessTokenService_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.PersonalAccessToken))
	})
	return _c
}

func (_c *MockPersonalAccessTokenService_Revoke_Call) Return(_a0 error) *MockPersonalAccessTokenService_Revoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPersonalAccessTokenService_Revoke_Call) RunAndReturn(run func(context.Context, *models.PersonalAccessToken) error) *MockPersonalAccessTokenService_Revoke_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPersonalAccessTokenService creates a new instance of MockPersonalAccessTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPersonalAccessTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPersonalAccessTokenService {
	mock := &MockPersonalAccessTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
