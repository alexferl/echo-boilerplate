// Code generated by mockery v2.42.0. DO NOT EDIT.

package handlers

import (
	context "context"

	models "github.com/alexferl/echo-boilerplate/models"
	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, model
func (_m *MockUserService) Create(ctx context.Context, model *models.User) (*models.User, error) {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) (*models.User, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.User); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - model *models.User
func (_e *MockUserService_Expecter) Create(ctx interface{}, model interface{}) *MockUserService_Create_Call {
	return &MockUserService_Create_Call{Call: _e.mock.On("Create", ctx, model)}
}

func (_c *MockUserService_Create_Call) Run(run func(ctx context.Context, model *models.User)) *MockUserService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *MockUserService_Create_Call) Return(_a0 *models.User, _a1 error) *MockUserService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Create_Call) RunAndReturn(run func(context.Context, *models.User) (*models.User, error)) *MockUserService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id, model
func (_m *MockUserService) Delete(ctx context.Context, id string, model *models.User) error {
	ret := _m.Called(ctx, id, model)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.User) error); ok {
		r0 = rf(ctx, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - model *models.User
func (_e *MockUserService_Expecter) Delete(ctx interface{}, id interface{}, model interface{}) *MockUserService_Delete_Call {
	return &MockUserService_Delete_Call{Call: _e.mock.On("Delete", ctx, id, model)}
}

func (_c *MockUserService_Delete_Call) Run(run func(ctx context.Context, id string, model *models.User)) *MockUserService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*models.User))
	})
	return _c
}

func (_c *MockUserService_Delete_Call) Return(_a0 error) *MockUserService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_Delete_Call) RunAndReturn(run func(context.Context, string, *models.User) error) *MockUserService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, params
func (_m *MockUserService) Find(ctx context.Context, params *models.UserSearchParams) (int64, models.Users, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 int64
	var r1 models.Users
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserSearchParams) (int64, models.Users, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserSearchParams) int64); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UserSearchParams) models.Users); ok {
		r1 = rf(ctx, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(models.Users)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *models.UserSearchParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserService_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockUserService_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - params *models.UserSearchParams
func (_e *MockUserService_Expecter) Find(ctx interface{}, params interface{}) *MockUserService_Find_Call {
	return &MockUserService_Find_Call{Call: _e.mock.On("Find", ctx, params)}
}

func (_c *MockUserService_Find_Call) Run(run func(ctx context.Context, params *models.UserSearchParams)) *MockUserService_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.UserSearchParams))
	})
	return _c
}

func (_c *MockUserService_Find_Call) Return(_a0 int64, _a1 models.Users, _a2 error) *MockUserService_Find_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserService_Find_Call) RunAndReturn(run func(context.Context, *models.UserSearchParams) (int64, models.Users, error)) *MockUserService_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneByEmailOrUsername provides a mock function with given fields: ctx, email, username
func (_m *MockUserService) FindOneByEmailOrUsername(ctx context.Context, email string, username string) (*models.User, error) {
	ret := _m.Called(ctx, email, username)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByEmailOrUsername")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.User, error)); ok {
		return rf(ctx, email, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = rf(ctx, email, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_FindOneByEmailOrUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneByEmailOrUsername'
type MockUserService_FindOneByEmailOrUsername_Call struct {
	*mock.Call
}

// FindOneByEmailOrUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - username string
func (_e *MockUserService_Expecter) FindOneByEmailOrUsername(ctx interface{}, email interface{}, username interface{}) *MockUserService_FindOneByEmailOrUsername_Call {
	return &MockUserService_FindOneByEmailOrUsername_Call{Call: _e.mock.On("FindOneByEmailOrUsername", ctx, email, username)}
}

func (_c *MockUserService_FindOneByEmailOrUsername_Call) Run(run func(ctx context.Context, email string, username string)) *MockUserService_FindOneByEmailOrUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_FindOneByEmailOrUsername_Call) Return(_a0 *models.User, _a1 error) *MockUserService_FindOneByEmailOrUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_FindOneByEmailOrUsername_Call) RunAndReturn(run func(context.Context, string, string) (*models.User, error)) *MockUserService_FindOneByEmailOrUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, id
func (_m *MockUserService) Read(ctx context.Context, id string) (*models.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockUserService_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserService_Expecter) Read(ctx interface{}, id interface{}) *MockUserService_Read_Call {
	return &MockUserService_Read_Call{Call: _e.mock.On("Read", ctx, id)}
}

func (_c *MockUserService_Read_Call) Run(run func(ctx context.Context, id string)) *MockUserService_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_Read_Call) Return(_a0 *models.User, _a1 error) *MockUserService_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Read_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockUserService_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, model
func (_m *MockUserService) Update(ctx context.Context, id string, model *models.User) (*models.User, error) {
	ret := _m.Called(ctx, id, model)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.User) (*models.User, error)); ok {
		return rf(ctx, id, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.User) *models.User); ok {
		r0 = rf(ctx, id, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.User) error); ok {
		r1 = rf(ctx, id, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - model *models.User
func (_e *MockUserService_Expecter) Update(ctx interface{}, id interface{}, model interface{}) *MockUserService_Update_Call {
	return &MockUserService_Update_Call{Call: _e.mock.On("Update", ctx, id, model)}
}

func (_c *MockUserService_Update_Call) Run(run func(ctx context.Context, id string, model *models.User)) *MockUserService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*models.User))
	})
	return _c
}

func (_c *MockUserService_Update_Call) Return(_a0 *models.User, _a1 error) *MockUserService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Update_Call) RunAndReturn(run func(context.Context, string, *models.User) (*models.User, error)) *MockUserService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
