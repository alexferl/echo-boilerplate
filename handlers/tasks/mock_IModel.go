// Code generated by mockery v2.42.0. DO NOT EDIT.

package tasks

import (
	context "context"

	jwt "github.com/lestrrat-go/jwx/v2/jwt"
	mock "github.com/stretchr/testify/mock"
)

// MockIModel is an autogenerated mock type for the Repository type
type MockIModel struct {
	mock.Mock
}

type MockIModel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIModel) EXPECT() *MockIModel_Expecter {
	return &MockIModel_Expecter{mock: &_m.Mock}
}

// Complete provides a mock function with given fields: id
func (_m *MockIModel) Complete(id string) {
	_m.Called(id)
}

// MockIModel_Complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Complete'
type MockIModel_Complete_Call struct {
	*mock.Call
}

// Complete is a helper method to define mock.On call
//   - id string
func (_e *MockIModel_Expecter) Complete(id interface{}) *MockIModel_Complete_Call {
	return &MockIModel_Complete_Call{Call: _e.mock.On("Complete", id)}
}

func (_c *MockIModel_Complete_Call) Run(run func(id string)) *MockIModel_Complete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIModel_Complete_Call) Return() *MockIModel_Complete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIModel_Complete_Call) RunAndReturn(run func(string)) *MockIModel_Complete_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, id, body
func (_m *MockIModel) Create(ctx context.Context, id string, body CreateTaskRequest) (*Task, error) {
	ret := _m.Called(ctx, id, body)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, CreateTaskRequest) (*Task, error)); ok {
		return rf(ctx, id, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, CreateTaskRequest) *Task); ok {
		r0 = rf(ctx, id, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, CreateTaskRequest) error); ok {
		r1 = rf(ctx, id, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIModel_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIModel_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - body CreateTaskRequest
func (_e *MockIModel_Expecter) Create(ctx interface{}, id interface{}, body interface{}) *MockIModel_Create_Call {
	return &MockIModel_Create_Call{Call: _e.mock.On("Create", ctx, id, body)}
}

func (_c *MockIModel_Create_Call) Run(run func(ctx context.Context, id string, body CreateTaskRequest)) *MockIModel_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(CreateTaskRequest))
	})
	return _c
}

func (_c *MockIModel_Create_Call) Return(_a0 *Task, _a1 error) *MockIModel_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIModel_Create_Call) RunAndReturn(run func(context.Context, string, CreateTaskRequest) (*Task, error)) *MockIModel_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockIModel) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIModel_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIModel_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockIModel_Expecter) Delete(ctx interface{}, id interface{}) *MockIModel_Delete_Call {
	return &MockIModel_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockIModel_Delete_Call) Run(run func(ctx context.Context, id string)) *MockIModel_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIModel_Delete_Call) Return(_a0 error) *MockIModel_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIModel_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockIModel_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filter, limit, skip
func (_m *MockIModel) Find(ctx context.Context, filter interface{}, limit int, skip int) (int64, Tasks, error) {
	ret := _m.Called(ctx, filter, limit, skip)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 int64
	var r1 Tasks
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int, int) (int64, Tasks, error)); ok {
		return rf(ctx, filter, limit, skip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int, int) int64); ok {
		r0 = rf(ctx, filter, limit, skip)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, int, int) Tasks); ok {
		r1 = rf(ctx, filter, limit, skip)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Tasks)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, interface{}, int, int) error); ok {
		r2 = rf(ctx, filter, limit, skip)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIModel_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockIModel_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - limit int
//   - skip int
func (_e *MockIModel_Expecter) Find(ctx interface{}, filter interface{}, limit interface{}, skip interface{}) *MockIModel_Find_Call {
	return &MockIModel_Find_Call{Call: _e.mock.On("Find", ctx, filter, limit, skip)}
}

func (_c *MockIModel_Find_Call) Run(run func(ctx context.Context, filter interface{}, limit int, skip int)) *MockIModel_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockIModel_Find_Call) Return(_a0 int64, _a1 Tasks, _a2 error) *MockIModel_Find_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIModel_Find_Call) RunAndReturn(run func(context.Context, interface{}, int, int) (int64, Tasks, error)) *MockIModel_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Incomplete provides a mock function with given fields:
func (_m *MockIModel) Incomplete() {
	_m.Called()
}

// MockIModel_Incomplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Incomplete'
type MockIModel_Incomplete_Call struct {
	*mock.Call
}

// Incomplete is a helper method to define mock.On call
func (_e *MockIModel_Expecter) Incomplete() *MockIModel_Incomplete_Call {
	return &MockIModel_Incomplete_Call{Call: _e.mock.On("Incomplete")}
}

func (_c *MockIModel_Incomplete_Call) Run(run func()) *MockIModel_Incomplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIModel_Incomplete_Call) Return() *MockIModel_Incomplete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIModel_Incomplete_Call) RunAndReturn(run func()) *MockIModel_Incomplete_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields: ctx, id, token
func (_m *MockIModel) Load(ctx context.Context, id string, token jwt.Token) (*Model, error) {
	ret := _m.Called(ctx, id, token)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 *Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, jwt.Token) (*Model, error)); ok {
		return rf(ctx, id, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, jwt.Token) *Model); ok {
		r0 = rf(ctx, id, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, jwt.Token) error); ok {
		r1 = rf(ctx, id, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIModel_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockIModel_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - token jwt.Token
func (_e *MockIModel_Expecter) Load(ctx interface{}, id interface{}, token interface{}) *MockIModel_Load_Call {
	return &MockIModel_Load_Call{Call: _e.mock.On("Load", ctx, id, token)}
}

func (_c *MockIModel_Load_Call) Run(run func(ctx context.Context, id string, token jwt.Token)) *MockIModel_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(jwt.Token))
	})
	return _c
}

func (_c *MockIModel_Load_Call) Return(_a0 *Model, _a1 error) *MockIModel_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIModel_Load_Call) RunAndReturn(run func(context.Context, string, jwt.Token) (*Model, error)) *MockIModel_Load_Call {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields:
func (_m *MockIModel) New() *Model {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 *Model
	if rf, ok := ret.Get(0).(func() *Model); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	return r0
}

// MockIModel_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type MockIModel_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
func (_e *MockIModel_Expecter) New() *MockIModel_New_Call {
	return &MockIModel_New_Call{Call: _e.mock.On("New")}
}

func (_c *MockIModel_New_Call) Run(run func()) *MockIModel_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIModel_New_Call) Return(_a0 *Model) *MockIModel_New_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIModel_New_Call) RunAndReturn(run func() *Model) *MockIModel_New_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx
func (_m *MockIModel) Read(ctx context.Context) (*Task, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Task, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIModel_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockIModel_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIModel_Expecter) Read(ctx interface{}) *MockIModel_Read_Call {
	return &MockIModel_Read_Call{Call: _e.mock.On("Read", ctx)}
}

func (_c *MockIModel_Read_Call) Run(run func(ctx context.Context)) *MockIModel_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIModel_Read_Call) Return(_a0 *Task, _a1 error) *MockIModel_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIModel_Read_Call) RunAndReturn(run func(context.Context) (*Task, error)) *MockIModel_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id
func (_m *MockIModel) Update(ctx context.Context, id string) (*Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIModel_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIModel_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockIModel_Expecter) Update(ctx interface{}, id interface{}) *MockIModel_Update_Call {
	return &MockIModel_Update_Call{Call: _e.mock.On("Update", ctx, id)}
}

func (_c *MockIModel_Update_Call) Run(run func(ctx context.Context, id string)) *MockIModel_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIModel_Update_Call) Return(_a0 *Task, _a1 error) *MockIModel_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIModel_Update_Call) RunAndReturn(run func(context.Context, string) (*Task, error)) *MockIModel_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIModel creates a new instance of MockIModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIModel {
	mock := &MockIModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
