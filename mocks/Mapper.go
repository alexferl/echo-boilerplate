// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Mapper is an autogenerated mock type for the Mapper type
type Mapper struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, filter, result
func (_m *Mapper) Find(ctx context.Context, filter interface{}, result interface{}) (interface{}, error) {
	ret := _m.Called(ctx, filter, result)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) interface{}); ok {
		r0 = rf(ctx, filter, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}) error); ok {
		r1 = rf(ctx, filter, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: ctx, filter, result
func (_m *Mapper) FindOne(ctx context.Context, filter interface{}, result interface{}) (interface{}, error) {
	ret := _m.Called(ctx, filter, result)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) interface{}); ok {
		r0 = rf(ctx, filter, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}) error); ok {
		r1 = rf(ctx, filter, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneById provides a mock function with given fields: ctx, id, result
func (_m *Mapper) FindOneById(ctx context.Context, id string, result interface{}) (interface{}, error) {
	ret := _m.Called(ctx, id, result)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) interface{}); ok {
		r0 = rf(ctx, id, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, id, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, document
func (_m *Mapper) Insert(ctx context.Context, document interface{}) error {
	ret := _m.Called(ctx, document)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, document)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, filter, update, result
func (_m *Mapper) Update(ctx context.Context, filter interface{}, update interface{}, result interface{}) (interface{}, error) {
	ret := _m.Called(ctx, filter, update, result)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, interface{}) interface{}); ok {
		r0 = rf(ctx, filter, update, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, interface{}) error); ok {
		r1 = rf(ctx, filter, update, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: ctx, id, document, result
func (_m *Mapper) UpdateById(ctx context.Context, id string, document interface{}, result interface{}) (interface{}, error) {
	ret := _m.Called(ctx, id, document, result)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) interface{}); ok {
		r0 = rf(ctx, id, document, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, interface{}) error); ok {
		r1 = rf(ctx, id, document, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMapper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMapper creates a new instance of Mapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMapper(t mockConstructorTestingTNewMapper) *Mapper {
	mock := &Mapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
