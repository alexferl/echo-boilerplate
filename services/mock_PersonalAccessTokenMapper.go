// Code generated by mockery v2.42.0. DO NOT EDIT.

package services

import (
	context "context"

	models "github.com/alexferl/echo-boilerplate/models"
	mock "github.com/stretchr/testify/mock"
)

// MockPersonalAccessTokenMapper is an autogenerated mock type for the PersonalAccessTokenMapper type
type MockPersonalAccessTokenMapper struct {
	mock.Mock
}

type MockPersonalAccessTokenMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPersonalAccessTokenMapper) EXPECT() *MockPersonalAccessTokenMapper_Expecter {
	return &MockPersonalAccessTokenMapper_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, model
func (_m *MockPersonalAccessTokenMapper) Create(ctx context.Context, model *models.PersonalAccessToken) (*models.PersonalAccessToken, error) {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.PersonalAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PersonalAccessToken) (*models.PersonalAccessToken, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.PersonalAccessToken) *models.PersonalAccessToken); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PersonalAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.PersonalAccessToken) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonalAccessTokenMapper_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPersonalAccessTokenMapper_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - model *models.PersonalAccessToken
func (_e *MockPersonalAccessTokenMapper_Expecter) Create(ctx interface{}, model interface{}) *MockPersonalAccessTokenMapper_Create_Call {
	return &MockPersonalAccessTokenMapper_Create_Call{Call: _e.mock.On("Create", ctx, model)}
}

func (_c *MockPersonalAccessTokenMapper_Create_Call) Run(run func(ctx context.Context, model *models.PersonalAccessToken)) *MockPersonalAccessTokenMapper_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.PersonalAccessToken))
	})
	return _c
}

func (_c *MockPersonalAccessTokenMapper_Create_Call) Return(_a0 *models.PersonalAccessToken, _a1 error) *MockPersonalAccessTokenMapper_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonalAccessTokenMapper_Create_Call) RunAndReturn(run func(context.Context, *models.PersonalAccessToken) (*models.PersonalAccessToken, error)) *MockPersonalAccessTokenMapper_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filter
func (_m *MockPersonalAccessTokenMapper) Find(ctx context.Context, filter interface{}) (models.PersonalAccessTokens, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 models.PersonalAccessTokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (models.PersonalAccessTokens, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) models.PersonalAccessTokens); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.PersonalAccessTokens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonalAccessTokenMapper_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockPersonalAccessTokenMapper_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
func (_e *MockPersonalAccessTokenMapper_Expecter) Find(ctx interface{}, filter interface{}) *MockPersonalAccessTokenMapper_Find_Call {
	return &MockPersonalAccessTokenMapper_Find_Call{Call: _e.mock.On("Find", ctx, filter)}
}

func (_c *MockPersonalAccessTokenMapper_Find_Call) Run(run func(ctx context.Context, filter interface{})) *MockPersonalAccessTokenMapper_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockPersonalAccessTokenMapper_Find_Call) Return(_a0 models.PersonalAccessTokens, _a1 error) *MockPersonalAccessTokenMapper_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonalAccessTokenMapper_Find_Call) RunAndReturn(run func(context.Context, interface{}) (models.PersonalAccessTokens, error)) *MockPersonalAccessTokenMapper_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, filter
func (_m *MockPersonalAccessTokenMapper) FindOne(ctx context.Context, filter interface{}) (*models.PersonalAccessToken, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *models.PersonalAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*models.PersonalAccessToken, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *models.PersonalAccessToken); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PersonalAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonalAccessTokenMapper_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockPersonalAccessTokenMapper_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
func (_e *MockPersonalAccessTokenMapper_Expecter) FindOne(ctx interface{}, filter interface{}) *MockPersonalAccessTokenMapper_FindOne_Call {
	return &MockPersonalAccessTokenMapper_FindOne_Call{Call: _e.mock.On("FindOne", ctx, filter)}
}

func (_c *MockPersonalAccessTokenMapper_FindOne_Call) Run(run func(ctx context.Context, filter interface{})) *MockPersonalAccessTokenMapper_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockPersonalAccessTokenMapper_FindOne_Call) Return(_a0 *models.PersonalAccessToken, _a1 error) *MockPersonalAccessTokenMapper_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonalAccessTokenMapper_FindOne_Call) RunAndReturn(run func(context.Context, interface{}) (*models.PersonalAccessToken, error)) *MockPersonalAccessTokenMapper_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, model
func (_m *MockPersonalAccessTokenMapper) Update(ctx context.Context, model *models.PersonalAccessToken) (*models.PersonalAccessToken, error) {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.PersonalAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PersonalAccessToken) (*models.PersonalAccessToken, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.PersonalAccessToken) *models.PersonalAccessToken); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PersonalAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.PersonalAccessToken) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersonalAccessTokenMapper_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPersonalAccessTokenMapper_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - model *models.PersonalAccessToken
func (_e *MockPersonalAccessTokenMapper_Expecter) Update(ctx interface{}, model interface{}) *MockPersonalAccessTokenMapper_Update_Call {
	return &MockPersonalAccessTokenMapper_Update_Call{Call: _e.mock.On("Update", ctx, model)}
}

func (_c *MockPersonalAccessTokenMapper_Update_Call) Run(run func(ctx context.Context, model *models.PersonalAccessToken)) *MockPersonalAccessTokenMapper_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.PersonalAccessToken))
	})
	return _c
}

func (_c *MockPersonalAccessTokenMapper_Update_Call) Return(_a0 *models.PersonalAccessToken, _a1 error) *MockPersonalAccessTokenMapper_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersonalAccessTokenMapper_Update_Call) RunAndReturn(run func(context.Context, *models.PersonalAccessToken) (*models.PersonalAccessToken, error)) *MockPersonalAccessTokenMapper_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPersonalAccessTokenMapper creates a new instance of MockPersonalAccessTokenMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPersonalAccessTokenMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPersonalAccessTokenMapper {
	mock := &MockPersonalAccessTokenMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
