// Code generated by mockery v2.42.0. DO NOT EDIT.

package services

import (
	context "context"

	models "github.com/alexferl/echo-boilerplate/models"
	mock "github.com/stretchr/testify/mock"
)

// MockTaskMapper is an autogenerated mock type for the TaskMapper type
type MockTaskMapper struct {
	mock.Mock
}

type MockTaskMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskMapper) EXPECT() *MockTaskMapper_Expecter {
	return &MockTaskMapper_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, model
func (_m *MockTaskMapper) Create(ctx context.Context, model *models.Task) (*models.Task, error) {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) (*models.Task, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) *models.Task); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Task) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskMapper_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTaskMapper_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - model *models.Task
func (_e *MockTaskMapper_Expecter) Create(ctx interface{}, model interface{}) *MockTaskMapper_Create_Call {
	return &MockTaskMapper_Create_Call{Call: _e.mock.On("Create", ctx, model)}
}

func (_c *MockTaskMapper_Create_Call) Run(run func(ctx context.Context, model *models.Task)) *MockTaskMapper_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Task))
	})
	return _c
}

func (_c *MockTaskMapper_Create_Call) Return(_a0 *models.Task, _a1 error) *MockTaskMapper_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskMapper_Create_Call) RunAndReturn(run func(context.Context, *models.Task) (*models.Task, error)) *MockTaskMapper_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filter, limit, skip
func (_m *MockTaskMapper) Find(ctx context.Context, filter interface{}, limit int, skip int) (int64, models.Tasks, error) {
	ret := _m.Called(ctx, filter, limit, skip)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 int64
	var r1 models.Tasks
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int, int) (int64, models.Tasks, error)); ok {
		return rf(ctx, filter, limit, skip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int, int) int64); ok {
		r0 = rf(ctx, filter, limit, skip)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, int, int) models.Tasks); ok {
		r1 = rf(ctx, filter, limit, skip)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(models.Tasks)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, interface{}, int, int) error); ok {
		r2 = rf(ctx, filter, limit, skip)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTaskMapper_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockTaskMapper_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - limit int
//   - skip int
func (_e *MockTaskMapper_Expecter) Find(ctx interface{}, filter interface{}, limit interface{}, skip interface{}) *MockTaskMapper_Find_Call {
	return &MockTaskMapper_Find_Call{Call: _e.mock.On("Find", ctx, filter, limit, skip)}
}

func (_c *MockTaskMapper_Find_Call) Run(run func(ctx context.Context, filter interface{}, limit int, skip int)) *MockTaskMapper_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockTaskMapper_Find_Call) Return(_a0 int64, _a1 models.Tasks, _a2 error) *MockTaskMapper_Find_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTaskMapper_Find_Call) RunAndReturn(run func(context.Context, interface{}, int, int) (int64, models.Tasks, error)) *MockTaskMapper_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneById provides a mock function with given fields: ctx, id
func (_m *MockTaskMapper) FindOneById(ctx context.Context, id string) (*models.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindOneById")
	}

	var r0 *models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskMapper_FindOneById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneById'
type MockTaskMapper_FindOneById_Call struct {
	*mock.Call
}

// FindOneById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockTaskMapper_Expecter) FindOneById(ctx interface{}, id interface{}) *MockTaskMapper_FindOneById_Call {
	return &MockTaskMapper_FindOneById_Call{Call: _e.mock.On("FindOneById", ctx, id)}
}

func (_c *MockTaskMapper_FindOneById_Call) Run(run func(ctx context.Context, id string)) *MockTaskMapper_FindOneById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTaskMapper_FindOneById_Call) Return(_a0 *models.Task, _a1 error) *MockTaskMapper_FindOneById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskMapper_FindOneById_Call) RunAndReturn(run func(context.Context, string) (*models.Task, error)) *MockTaskMapper_FindOneById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, model
func (_m *MockTaskMapper) Update(ctx context.Context, model *models.Task) (*models.Task, error) {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) (*models.Task, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) *models.Task); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Task) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskMapper_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTaskMapper_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - model *models.Task
func (_e *MockTaskMapper_Expecter) Update(ctx interface{}, model interface{}) *MockTaskMapper_Update_Call {
	return &MockTaskMapper_Update_Call{Call: _e.mock.On("Update", ctx, model)}
}

func (_c *MockTaskMapper_Update_Call) Run(run func(ctx context.Context, model *models.Task)) *MockTaskMapper_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Task))
	})
	return _c
}

func (_c *MockTaskMapper_Update_Call) Return(_a0 *models.Task, _a1 error) *MockTaskMapper_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskMapper_Update_Call) RunAndReturn(run func(context.Context, *models.Task) (*models.Task, error)) *MockTaskMapper_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskMapper creates a new instance of MockTaskMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskMapper {
	mock := &MockTaskMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
